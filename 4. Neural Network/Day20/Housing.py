# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I6JfYxFAdQkDupMCD-jQKPPro5IJWWBM
"""

import pandas as pd
import numpy as np
import tensorflow as tf

df=pd.read_csv("/content/Housing.csv")
df

X=df.iloc[:,1:]
y =df.iloc[:,0]

X

y

X=pd.get_dummies(X,drop_first=True)

X

X=X.values
y=y.values
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=2022)

from sklearn.preprocessing import MinMaxScaler
scalerx=MinMaxScaler()
scalery=MinMaxScaler()
X_train = scalerx.fit_transform(X_train)
y_train = scalery.fit_transform(y_train.reshape(-1,1))

X_test = scalerx.transform(X_test)
y_test = scalery.transform(y_test.reshape(-1,1))

tf.random.set_seed(2022)
model=tf.keras.models.Sequential([
                tf.keras.layers.Dense(8,activation="relu",input_shape=(X_train.shape[1],)),
                                 tf.keras.layers.Dense(6,activation="relu"),
                                 tf.keras.layers.Dense(3,activation="relu"),
                                 tf.keras.layers.Dense(1,activation="relu")
                                  ])

model.compile(optimizer="sgd",loss="mean_squared_error",metrics=["mae"])

from tensorflow.keras.callbacks import EarlyStopping
monitor = EarlyStopping(monitor='val_loss', min_delta=0.01, patience=10, verbose=2, mode='auto',
        restore_best_weights=True)
history2 = model.fit(X_train,y_train,validation_data=(X_test,y_test),callbacks=[monitor],verbose=2,epochs=500)

import matplotlib.pyplot as plt
plt.plot(history2.history['loss'])
plt.plot(history2.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

history=model.fit(X_train,y_train,validation_data=(X_test,y_test),verbose=2,epochs=500)

import matplotlib.pyplot as plt
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

from sklearn.metrics import mean_absolute_error
y_pred=model.predict(X_test)
print(f"MAE:{np.sqrt(mean_absolute_error(y_test,y_pred))}")

from sklearn.metrics import mean_squared_error
print(f"RMSE:{np.sqrt(mean_squared_error(y_test,y_pred))}")

from sklearn.metrics import r2_score
print(f"R2_Score:{r2_score(y_test,y_pred)}")