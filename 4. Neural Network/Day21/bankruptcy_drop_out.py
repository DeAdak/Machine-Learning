# -*- coding: utf-8 -*-
"""Bankruptcy_DROP_OUT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q9jMMpr4j7w0fxbZ1YnYKgtNdVBShcHM
"""

import pandas as pd
import tensorflow as tf
import numpy as np

df = pd.read_csv("/content/Bankruptcy.csv")
df.head()

y = df.iloc[:,1]
y

X = df.iloc[:,2:]
X

from sklearn.preprocessing import MinMaxScaler
scalerX = MinMaxScaler()
X = scalerX.fit_transform(X)
X

from sklearn.model_selection import train_test_split 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, 
                                                    random_state=2022,stratify=y)

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation
from keras import metrics
import keras

Dense_layer1 = Dense(25, input_dim=X_train.shape[1], activation='relu',
                     activity_regularizer = keras.regularizers.l1(0.001))
Dense_layer2 = Dense(20, activation='relu',
                     activity_regularizer = keras.regularizers.l1(0.001))
Dense_layer3 = Dense(10, activation='relu',
                     activity_regularizer = keras.regularizers.l1(0.001))
Dense_layer4 = Dense(5, activation='relu',
                     activity_regularizer = keras.regularizers.l1(0.001))
Dense_layer5 = Dense(1,activation='sigmoid')

model = Sequential()
model.add(Dense_layer1)
model.add(Dense_layer2)
model.add(Dense_layer3)
model.add(Dense_layer4)
model.add(Dense_layer5) # Output
model.compile(optimizer='sgd', loss='binary_crossentropy',metrics=['accuracy'])

print(model.summary())

model.fit( X_train,y_train,validation_data=(X_test,y_test),verbose=2,epochs=200)

from sklearn.metrics import log_loss
y_pred_prob = model.predict(X_test)
log_loss(y_true=y_test,y_pred=y_pred_prob)

tf.random.set_seed(seed=2022)
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(25, activation='relu',input_shape=(X_train.shape[1], )), 
    tf.keras.layers.Dropout(rate=0.2,seed=2022),
    tf.keras.layers.Dense(20, activation='relu'),
    tf.keras.layers.Dropout(rate=0.1,seed=2022),
    tf.keras.layers.Dense(10, activation='relu'), 
    tf.keras.layers.Dense(5, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')  
])
model.compile(optimizer='sgd', loss='binary_crossentropy',metrics=['accuracy'])

print(model.summary())

model.fit( X_train,y_train,validation_data=(X_test,y_test),verbose=2,epochs=200)

from sklearn.metrics import log_loss
y_pred_prob = model.predict(X_test)
log_loss(y_true=y_test,y_pred=y_pred_prob)